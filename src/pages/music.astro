---
import { Cloudinary } from "@cloudinary/url-gen";
import Layout from "@layouts/Layout.astro";
import Footer from "@components/Footer";
import Credits from "@components/Credits.astro";
import Header from "@components/Header.astro";
import { slide } from "astro:transitions";
import { GET as MusicGET } from "./api/spotify";
import { smartTruncate } from "@lib/utils";
import Image from "astro/components/Image.astro";

const cld = new Cloudinary({
  cloud: {
    cloudName: "dtqhs8nvm",
  },
});

const response = await MusicGET(Astro);
const music = await response.json();
const artists = music.artists as Artist;
const recentTracks = music.recentTracks as Track;
const uniqueRecentTracks = recentTracks
  .filter(
    (track, index, self) =>
      index === self.findIndex((t) => t.title === track.title),
  )
  .slice(0, 12);

export type Track = {
  artists: {
    name: string;
    external_urls: {
      spotify: string;
    };
  }[];
  songUrl: string;
  title: string;
  album: {
    name: string;
    external_urls: {
      spotify: string;
    };
  };
  image: string;
}[];
export type Artist = {
  name: string;
  url: string;
  image: string;
}[];

uniqueRecentTracks.forEach((track) => {
  const albumImageUrl = track.image;

  const cldSrc = cld
    .image(albumImageUrl)
    .setDeliveryType("fetch")
    .format("webp");

  track.image = cldSrc.toURL();
});

artists.forEach((artist) => {
  const artistImageUrl = artist.image;

  const cldSrc = cld
    .image(artistImageUrl)
    .setDeliveryType("fetch")
    .format("webp");

  artist.image = cldSrc.toURL();
});
---

<Layout title="rcn.sh â€¢ Music" image="https://rcn.sh/api/og.png?title=Music">
  <main
    class="text-[#c5c0b8] h-[100dvh] min-h-[100dvh] w-[100dvw] overflow-x-hidden py-8 flex flex-col"
    transition:animate="fade"
  >
    <Header />
    <section
      class="flex flex-col mx-2 my-4"
      transition:animate={slide({ duration: "0.4s" })}
    >
      <div>
        <h1 class="text-[#cbc8c2] text-2xl font-mono my-8 flex justify-center">
          Recently Played Tracks
        </h1>

        <div class="flex justify-center py-8">
          <div class="grid lg:grid-cols-3 gap-y-4 gap-x-4 grid-cols-1">
            {
              uniqueRecentTracks.map(
                ({ artists, album, songUrl, title, image }) => (
                  <div class="flex flex-row items-center space-x-4">
                    <Image
                      src={image}
                      alt={title}
                      class="w-16 h-16"
                      height="64"
                      width="64"
                      loading={"eager"}
                    />
                    <div class="flex flex-col">
                      <a href={songUrl}>
                        <h3 class="font-semibold text-neutral-100">
                          {smartTruncate(title, 40, { position: 25 })}
                        </h3>
                      </a>
                      <p>
                        {artists.map(({ name, external_urls }, index) => (
                          <span>
                            {index < artists.length - 1 ? (
                              <a href={external_urls.spotify}>
                                {name.trim().concat(",")}
                              </a>
                            ) : (
                              <a href={external_urls.spotify}>{name.trim()}</a>
                            )}
                          </span>
                        ))}
                      </p>
                      <a href={album.external_urls.spotify}>
                        {album.name.length > 40
                          ? album.name.slice(0, 40) + "..."
                          : album.name}
                      </a>
                    </div>
                  </div>
                ),
              )
            }
          </div>
        </div>
      </div>
      <h1
        class="text-[#cbc8c2] text-2xl font-semibold my-8 flex justify-center"
      >
        Top Artists
      </h1>

      <div class="flex justify-center">
        <div class="grid lg:grid-cols-3 gap-y-4 gap-x-4 grid-cols-1">
          {
            artists.map(({ name, url, image }) => (
              <div class="flex flex-row items-center space-x-4 px-2">
                <Image
                  src={image}
                  alt={name}
                  class="w-16 h-16"
                  width="64"
                  height="64"
                  loading={"eager"}
                />
                <div class="flex flex-col">
                  <a href={url}>
                    <h3 class="font-semibold text-neutral-100">{name}</h3>
                  </a>
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </section>
    <div class="mt-auto">
      <Footer client:only="react" transition:persist>
        <Credits />
      </Footer>
    </div>
  </main>
</Layout>
