---
import {
  S3Client,
  ListObjectsV2Command,
} from "@aws-sdk/client-s3";
import Layout from "@layouts/Layout.astro";
import Footer from "@components/Footer";
import Credits from "@components/Credits.astro";
import Header from "@components/Header.astro";
import FolderTable from "@components/FolderTable";

interface FileData {
  key: string;
  size: number;
  lastModified: string;
}

interface FolderData {
  name: string;
  contents: (FileData | FolderData)[];
}

const client = new S3Client({
  endpoint: "https://31e51704ff7169c03d7014c3a1e5f110.r2.cloudflarestorage.com",
  credentials: {
    accessKeyId: import.meta.env.S3_ACCESS_KEY_ID,
    secretAccessKey: import.meta.env.S3_SECRET_ACCESS_KEY,
  },
  region: "us-east-1",
});

const buildNestedStructure = (files: FileData[]): FolderData => {
  const root: FolderData = { name: "", contents: [] };

  files.forEach((file) => {
    const parts = file.key.split("/");
    let currentFolder = root;

    parts.forEach((part, index) => {
      if (index === parts.length - 1) {
        // It's a file
        currentFolder.contents.push(file);
      } else {
        // It's a folder
        let folder = currentFolder.contents.find(
          (item) => "name" in item && item.name === part,
        ) as FolderData;

        if (!folder) {
          folder = { name: part, contents: [] };
          currentFolder.contents.push(folder);
        }

        currentFolder = folder;
      }
    });
  });

  return root;
};

const listBucketContents = async (): Promise<FileData[]> => {
  try {
    const command = new ListObjectsV2Command({ Bucket: "rcn" });
    const response = await client.send(command);

    if (response.Contents) {
      const filteredFiles = await Promise.all(
        response.Contents.filter((item) => item.Size && item.Size > 64).map(
          async (item) => {
            return {
              key: item.Key!,
              size: item.Size!,
              lastModified: item.LastModified!.toISOString(),
            };
          },
        ),
      );

      return filteredFiles.filter((file): file is FileData => file !== null);
    } else {
      console.log("The bucket is empty.");
      return [];
    }
  } catch (error) {
    console.error("Error listing bucket contents:", error);
    return [];
  }
};

let nestedData: FolderData | null = null;
const fileData = await listBucketContents();

if (fileData.length > 0) {
  nestedData = buildNestedStructure(fileData);
} else {
  console.log("Failed to fetch or parse bucket data.");
}
---

<Layout title="rcn.sh â€¢ Files" image="https://rcn.sh/api/og.png?title=Files">
  <main
    class="text-[#c5c0b8] min-h-screen w-[100dvw] overflow-x-hidden py-8 flex flex-col"
    transition:animate="fade"
  >
    <Header />
    <h1 class="text-center font-mono text-xl lg:text-3xl md:text-2xl">Files</h1>
    <section
      class="mx-auto w-[100%] text-[#cdc8c2] lg:w-[50%] lg:text-left mt-10"
    >
      <FolderTable
        data={nestedData || { name: "", contents: [] }}
        client:load
      />
    </section>
    <div class="mt-auto">
      <Footer client:only="react">
        <Credits />
      </Footer>
    </div>
  </main>
</Layout>
